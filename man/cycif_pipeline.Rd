% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipeline.R
\name{cycif_pipeline}
\alias{cycif_pipeline}
\title{Run Complete CyCIF Analysis Pipeline}
\usage{
cycif_pipeline(
  counts,
  rois = NULL,
  gate_table = NULL,
  slide_info = NULL,
  roi_info = NULL,
  output_dir,
  summary_filters = list(`PanCK+` = ~PanCKp, `PanCK-` = ~!PanCKp),
  summary_groups = list(by_roi = c("slideName", "ROI", "ROIname"), by_slide =
    c("slideName"), by_roi_type = c("slideName", "ROIname")),
  sampling_mode = "all_cells",
  sample_size = 50000,
  marker_combinations = NULL,
  double_gates = NULL,
  scale_factor = 0.65,
  expand_distance = 50,
  roi_priority = NULL,
  slide_filter = NULL,
  cell_file_pattern = "*--unmicst_cell.csv*",
  roi_file_pattern = "*-rois.csv"
)
}
\arguments{
\item{counts}{Either a directory path containing cell data files, or pre-loaded
cell data as a list of data frames by slide name or single data frame with slideName column}

\item{rois}{Either a directory path containing ROI files, or pre-loaded
ROI data as a data frame (defaults to \code{counts} if \code{counts} is a path)}

\item{gate_table}{Either a path to gate table CSV file, or pre-loaded
gate table data frame (optional)}

\item{slide_info}{Either a path to slide metadata CSV file, or pre-loaded
slide metadata data frame (optional)}

\item{roi_info}{Either a path to ROI metadata CSV file, or pre-loaded
ROI metadata data frame (optional)}

\item{output_dir}{Directory to save results}

\item{summary_filters}{Named list of formula expressions for creating
stratified summaries. Default creates PanCK+/- summaries.
Example: \code{list("panCK+" = ~PanCKp, "CD8+" = ~CD8ap)}}

\item{summary_groups}{Named list of character vectors defining different
grouping strategies for summaries. Default groups by ROI.
Example: \code{list("by_roi" = c("slideName", "ROI", "ROIname"), by_slide = c("slideName"))}}

\item{sampling_mode}{Sampling mode, either "all_cells" or "roi_only"}

\item{sample_size}{Number of cells to sample per slide (NULL for no sampling)}

\item{marker_combinations}{List of marker combination definitions. If NULL,
uses default combinations. Example: \code{list(strange_cells = ~p53p & CD11cp)}}

\item{double_gates}{Data frame with marker1, marker2 columns for double gates}

\item{scale_factor}{Scale factor to convert pixels to microns (default 0.65)}

\item{expand_distance}{Distance in microns to expand ROIs (default 50,
set to 0 to disable)}

\item{roi_priority}{Character vector of ROI names in order of priority
(first trumps later). When a cell overlaps multiple ROIs, assigns the
ROI with highest priority. If NULL, assigns first overlapping ROI.}

\item{slide_filter}{Optional vector of slide names to process}

\item{cell_file_pattern}{Glob pattern for matching cell data files. The first
\code{*} indicates where the slide name appears. Default: "\emph{--unmicst_cell.csv}"}

\item{roi_file_pattern}{Glob pattern for matching ROI files. The first \code{*}
indicates where the slide name appears. Default: "*-rois.csv"}
}
\value{
List with analysis results (also saves files to \code{output_dir})
}
\description{
Runs the complete CyCIF analysis pipeline from data loading through
result saving. Accepts either file paths or pre-loaded data for maximum flexibility.
}
\examples{
\dontrun{
# Basic pipeline run with file paths
results <- cycif_pipeline(
  counts = "/path/to/data",
  output_dir = "/path/to/output"
)

# Pipeline with pre-loaded data
cell_data <- cycif_load_cell_data("/path/to/data")
roi_data <- cycif_load_roi_data("/path/to/rois")
results <- cycif_pipeline(
  counts = cell_data,
  rois = roi_data,
  output_dir = "/path/to/output"
)

# Mixed approach - some paths, some pre-loaded data
results <- cycif_pipeline(
  counts = "/path/to/data",
  rois = my_roi_dataframe,
  gate_table = "/path/to/gates.csv",
  output_dir = "/path/to/output",
  summary_filters = list("CD8+" = ~CD8ap, "CD4+" = ~CD4p),
  sample_size = 25000,
  sampling_mode = "roi_only"
)

# Custom file patterns
results <- cycif_pipeline(
  counts = "/path/to/data",
  output_dir = "/path/to/output",
  cell_file_pattern = "Sample_*_cells.csv.gz",
  roi_file_pattern = "Sample_*_rois.csv"
)
}
}
